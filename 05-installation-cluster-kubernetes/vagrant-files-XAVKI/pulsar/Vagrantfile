Vagrant.configure(2) do |config|

	# before you must install these plugins to speed up vagrant provisionning
  # vagrant plugin install vagrant-faster
  # vagrant plugin install vagrant-cachier

  config.cache.auto_detect = true
	# Set some variables
  etcHosts = ""
  pulsar = ""
  pulsar_georeplication = ""
  monitoring = ""
  pulsarManager = ""

  case ARGV[0]
    when "provision", "up"

    print "Do you want to install pulsar (yes/no) ?\n"
    pulsar = STDIN.gets.chomp
    print "\n"
    if pulsar == "yes"

      print "Do you want to georeplication test (yes/no) ?\n"
      pulsar_georeplication = STDIN.gets.chomp
      print "\n"

      print "Do you want to install monitoring (yes/no) ?\n"
      monitoring = STDIN.gets.chomp
      print "\n"

    end


  end

	# some settings for common server (not for haproxy)
  common = <<-SHELL
  sudo apt update -qq 2>&1 >/dev/null
  sudo apt install -y -qq iftop curl software-properties-common git vim tree net-tools telnet git 2>&1 >/dev/null
  sudo apt install -y -qq openjdk-17-jdk-headless || True 2>&1 >/dev/null
  sudo apt purge -q -y openjdk-17-jdk-headless && apt autoremove -q -y && apt install -y -qq openjdk-17-jdk-headless 2>&1 >/dev/null
  sed -i 's/ChallengeResponseAuthentication no/ChallengeResponseAuthentication yes/g' /etc/ssh/sshd_config
  sudo systemctl restart sshd
  SHELL

  docker = <<-SHELL
  curl -fsSL https://get.docker.com -o get-docker.sh 2>&1 >/dev/null
  sudo sh get-docker.sh 2>&1 >/dev/null
  sudo usermod -aG docker vagrant
  sudo service docker start
  sudo curl -L "https://github.com/docker/compose/releases/download/1.25.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
  sudo chmod 755 /usr/local/bin/docker-compose
  SHELL

  config.vm.box = "debian/bullseye64"
  config.vm.box_url = "debian/bullseye64"

  #config.vm.box = "debian/bookworm64"
  #config.vm.box_url = "debian/bookworm64"

	# set servers list and their parameters
	NODES = [
  	{ :hostname => "ext-zook1", :ip => "192.168.13.174", :cpus => 4, :mem => 2048, :type => "external_zookeeper" },
  	{ :hostname => "pulsar1", :ip => "192.168.13.170", :cpus => 4, :mem => 4096, :type => "pulsar" },
  	{ :hostname => "pulsar2", :ip => "192.168.13.171", :cpus => 4, :mem => 4096, :type => "pulsar" },
  	{ :hostname => "pulsar3", :ip => "192.168.13.172", :cpus => 4, :mem => 4096, :type => "pulsar" },
  	{ :hostname => "ext-pulsar1", :ip => "192.168.13.175", :cpus => 4, :mem => 4096, :type => "external-pulsar" },
  	{ :hostname => "pexternal", :ip => "192.168.13.176", :cpus => 4, :mem => 4096, :type => "external" }
	  ]
	# define /etc/hosts for all servers
  NODES.each do |node|
			etcHosts += "echo '" + node[:ip] + "   " + node[:hostname] + "'>> /etc/hosts" + "\n"
  end #end NODES

	# run installation
  NODES.each do |node|
    config.vm.define node[:hostname] do |cfg|
			cfg.vm.hostname = node[:hostname]
      cfg.vm.network "private_network", ip: node[:ip]
      cfg.vm.provider "virtualbox" do |v|
				v.customize [ "modifyvm", :id, "--cpus", node[:cpus] ]
        v.customize [ "modifyvm", :id, "--memory", node[:mem] ]
        v.customize [ "modifyvm", :id, "--natdnshostresolver1", "on" ]
        v.customize [ "modifyvm", :id, "--natdnsproxy1", "on" ]
        v.customize [ "modifyvm", :id, "--name", node[:hostname] ]
				v.customize [ "modifyvm", :id, "--ioapic", "on" ]
        v.customize [ "modifyvm", :id, "--nictype1", "virtio" ]
      end #end provider
			
			#for all
			cfg.vm.provision :shell, :path => "../_generic_scripts/install_xavki.sh"
      cfg.vm.provision :shell, :inline => etcHosts
			cfg.vm.provision :shell, :inline => common
      cfg.vm.provision :shell, :path => "install_node_exporter.sh"

      if pulsar == "yes"
        if node[:type] == "external_zookeeper" && pulsar_georeplication == "yes"
          cfg.vm.provision :shell, :path => "install_pulsar_base.sh"
          cfg.vm.provision :shell, :path => "install_pulsar_zookeeper.sh", :args => node[:type]
        end
        if node[:type] == "external-pulsar" && pulsar_georeplication == "yes"
          cfg.vm.provision :shell, :path => "install_pulsar_base.sh"
          cfg.vm.provision :shell, :path => "install_pulsar_zookeeper.sh", :args => node[:type]
          cfg.vm.provision :shell, :path => "install_pulsar_broker.sh", :args => node[:type]
        end
        if node[:type] == "pulsar" && pulsar_georeplication == "yes"
          cfg.vm.provision :shell, :path => "install_pulsar_base.sh"
          cfg.vm.provision :shell, :path => "install_pulsar_zookeeper.sh"
          cfg.vm.provision :shell, :path => "install_pulsar_broker.sh", :args => "georeplication"
        end
        if node[:type] == "pulsar" && pulsar_georeplication == "no"
          cfg.vm.provision :shell, :path => "install_pulsar_base.sh"
          cfg.vm.provision :shell, :path => "install_pulsar_zookeeper.sh"
          cfg.vm.provision :shell, :path => "install_pulsar_broker.sh"
        end
        if node[:type] == "external"
          if monitoring == "yes"
            cfg.vm.provision :shell, :path => "install_prometheus.sh"
            cfg.vm.provision :shell, :path => "install_external.sh"
          end
        end
      end

    end # end config
  end # end nodes

end 


