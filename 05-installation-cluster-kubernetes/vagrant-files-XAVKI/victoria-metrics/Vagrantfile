Vagrant.configure(2) do |config|

	# Set some variables
  etcHosts = ""
  victoria_metrics = ""
  victoria_agent = ""
  grafana = ""
  node_exporter = ""
  victoria_cluster = ""
  docker = ""  

  case ARGV[0]
    when "provision", "up"

    print "Install node_exporter ? (y/n)\n"
    node_exporter = STDIN.gets.chomp
    print "\n"

    print "Install grafana ? (y/n)\n"
    grafana = STDIN.gets.chomp
    print "\n"

    print "Install victoria metrics ? (y/n)\n"
    victoria_metrics = STDIN.gets.chomp
    print "\n"

    print "Install victoria cluster ? (y/n)\n"
    victoria_cluster = STDIN.gets.chomp
    print "\n"

    print "Install victoria agent ? (y/n)\n"
    victoria_agent = STDIN.gets.chomp
    print "\n"

    if victoria_agent == "y"
      print "Install victoria alerting ? (y/n)\n"
      victoria_alert = STDIN.gets.chomp
      print "\n"
    end

  end

  common = <<-SHELL
  sudo apt update -qq 2>&1 >/dev/null
  sudo apt install -y -qq curl software-properties-common git vim tree net-tools telnet python3-pip 2>&1 >/dev/null
  sudo echo "autocmd filetype yaml setlocal ai ts=2 sw=2 et" > /home/vagrant/.vimrc
  sed -i 's/ChallengeResponseAuthentication no/ChallengeResponseAuthentication yes/g' /etc/ssh/sshd_config
  sudo systemctl restart sshd
  SHELL

  docker_packages = <<-SHELL
  curl -fsSL https://get.docker.com -o get-docker.sh 2>&1 >/dev/null
  sudo sh get-docker.sh 2>&1 >/dev/null
  sudo usermod -aG docker vagrant
  sudo service docker start
  sudo curl -L "https://github.com/docker/compose/releases/download/1.25.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
  sudo chmod 755 /usr/local/bin/docker-compose
  SHELL

	# set vagrant image
  config.vm.box = "debian/bullseye64"
  config.vm.box_url = "debian/bullseye"

	# set servers list and their parameters
	NODES = [
  	{ :hostname => "vic1", :ip => "192.168.18.51", :cpus => 2, :mem => 2048, :type => "victoria" },
    { :hostname => "vic2", :ip => "192.168.18.52", :cpus => 2, :mem => 2048, :type => "victoria" },
    { :hostname => "vic3", :ip => "192.168.18.53", :cpus => 2, :mem => 2048, :type => "victoria" },
    { :hostname => "vmagent1", :ip => "192.168.18.54", :cpus => 2, :mem => 1024, :type => "vmagent" },
    { :hostname => "vmagent2", :ip => "192.168.18.55", :cpus => 2, :mem => 1024, :type => "vmagent" },
  	{ :hostname => "graf1", :ip => "192.168.18.56", :cpus => 2, :mem => 2048, :type => "grafana" },
  	{ :hostname => "node1", :ip => "192.168.18.58", :cpus => 1, :mem => 1024, :type => "simpleserver" },
  	{ :hostname => "node2", :ip => "192.168.13.59", :cpus => 1, :mem => 1024, :type => "simpleserver" }
	]

	# define /etc/hosts for all servers
  NODES.each do |node|
   	etcHosts += "echo '" + node[:ip] + "   " + node[:hostname] + "' >> /etc/hosts" + "\n"
  end #end NODES

	# run installation
  NODES.each do |node|
    config.vm.define node[:hostname] do |cfg|
			cfg.vm.hostname = node[:hostname]
      cfg.vm.network "private_network", ip: node[:ip]
      cfg.vm.provider "virtualbox" do |v|
				v.customize [ "modifyvm", :id, "--cpus", node[:cpus] ]
        v.customize [ "modifyvm", :id, "--memory", node[:mem] ]
        v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
        v.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
        v.customize ["modifyvm", :id, "--name", node[:hostname] ]
      end #end provider
			
			#for all
      cfg.vm.provision :shell, :inline => etcHosts
			cfg.vm.provision :shell, :inline => common
      cfg.vm.provision :shell, :path => "../_generic_scripts/install_xavki.sh"
      cfg.vm.provision :shell, :inline => docker_packages

      if node_exporter == "y"      
        cfg.vm.provision :shell, :path => "install_node_exporter.sh"
      end

      if node[:type] == "victoria" and victoria_cluster == "y" and victoria_metrics == "y"
        cfg.vm.provision :shell, :path => "install_victoria_cluster.sh"
      end
      if node[:type] == "victoria" and victoria_cluster == "n" and victoria_metrics == "y"
        cfg.vm.provision :shell, :path => "install_victoria_metrics.sh"
      end
      if node[:type] == "vmagent" and  victoria_agent == "y"
        cfg.vm.provision :shell, :path => "install_victoria_agent.sh", :args => [victoria_cluster,node_exporter]
        if victoria_alert == "y"
          cfg.vm.provision :shell, :path => "install_victoria_alert.sh", :args => [victoria_cluster]
        end
      end
      if grafana == "y" and node[:type] == "grafana"
      	cfg.vm.provision :shell, :path => "install_grafana.sh", :args => [victoria_cluster]
			end

    end # end config
  end # end nodes
end 
